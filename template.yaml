AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Exemplo AWS Batch com EKS

Transform:
  - AWS::Serverless-2016-10-31

Parameters:

  VpcId:
    Type: String
    Default: vpc-8c0794e9   
    #Default: vpc-0979056e

  Subnets:
    Description: Select 3 subnets where workers can be created.
    Type: List<AWS::EC2::Subnet::Id>
    #Default: subnet-0e7bd4c17ddc3ea3f, subnet-0b9754b3aa8aff21c, subnet-040f57dde9caf9726
    Default: subnet-79d76b0e, subnet-d939e680, subnet-1df19478

  KeyPairName:
    Type: String
    Description: Name of an existing EC2 key pair (for SSH-access to the worker node instances)
    Default: test-eks-batch
    #Default: poc-eks-batch

Mappings:

  # IDs of the "EKS-optimised AMIs" for the worker nodes:
  # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
  EksAmiIds:
    sa-east-1:
      Standard: ami-077a9a8fc9de01cc9
    us-east-1:
      Standard: ami-06bf8e441ff8de6c6

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"
        # - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
        #   Value: "owned"


  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Ref AWS::StackName
      Type: MANAGED
      State: ENABLED
      # ServiceRole: arn:aws:iam::111122223333:role/aws-service-role/batch.amazonaws.com/AWSServiceRoleForBatch
      EksConfiguration:
        EksClusterArn:
        KubernetesNamespace: 
      ComputeResources:
        Type: EC2
        AllocationStrategy: BEST_FIT_PROGRESSIVE
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 8
        InstanceTypes:
          - optimal
          # - m1.small
          # - m3.medium
        Subnets: !Ref Subnets
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceRole: BatchInstanceProfile
        # ImageId: !FindInMap [ EksAmiIds, !Ref AWS::Region, Standard ]
        Ec2KeyPair: !Ref KeyPairName
        # LaunchTemplate:
        #   LaunchTemplateId: !Ref CpuLaunchTemplate

  # CpuLaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateName: !Join ["", [!Ref Prefix, "RasterVisionCpuLaunchTemplate"]]
  #     LaunchTemplateData:
  #       BlockDeviceMappings:
  #         - DeviceName: /dev/xvda
  #           Ebs:
  #             VolumeType: gp2
  #             VolumeSize: !Ref CPUInstanceStorage

  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BatchInstanceRole

  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - batch.amazonaws.com
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  TestApplicationJob:
    Type : AWS::Batch::JobDefinition
    Properties : 
      Type : container
      ContainerProperties : 
        Image: !Sub '137112412989.dkr.ecr.${AWS::Region}.amazonaws.com/amazonlinux:latest'
        Vcpus : 2
        Memory : 2000
        Command : [ "echo", "Hello World, I am a low priority job" ]
      RetryStrategy: 
        Attempts: 1

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Ref AWS::StackName
      Priority: 1
      State: ENABLED
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1